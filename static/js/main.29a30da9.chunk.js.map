{"version":3,"sources":["bubble.js","reportWebVitals.js","index.js"],"names":["RESOLUTION","colors","Bubble","useState","particles","setParticles","canvasRef","useRef","useEffect","arr","newArr","slice","i","length","rand","Math","floor","random","getShuffledArr","canvas","ctx","getContext","result","text","width","height","fillStyle","measureText","scaler","font","fillText","idata","getImageData","buffer32","Uint32Array","data","buffer","x","y","color","round","push","time","getParticles","current","svgSize","className","ref","style","display","viewBox","xmlns","map","item","transform","cx","cy","r","fill","animationDelay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","href","target","rel","document","getElementById"],"mappings":"uLAGMA,EAAa,IACbC,EAAS,CAAC,UAAW,UAAW,UAAW,WAqFlCC,MAvCf,WAAmB,IAAD,EACkBC,qBADlB,mBACTC,EADS,KACEC,EADF,KAEVC,EAAYC,iBAAO,MAEzBC,qBAAU,WACRH,EAjDmB,SAACI,GAEtB,IADA,IAAMC,EAASD,EAAIE,QACVC,EAAIF,EAAOG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAME,EAAOC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADH,EAEd,CAACF,EAAOI,GAAOJ,EAAOE,IAAjDF,EAAOE,GAFkC,KAE9BF,EAAOI,GAFuB,KAI5C,OAAOJ,EA2CQQ,CAxCI,SAACC,GACpB,IAAMC,EAAMD,EAAOE,WAAW,MAExBC,EAAS,GACTC,EAjBK,YAkBXJ,EAAOK,MAAQxB,EACfmB,EAAOM,OAASzB,EAChBoB,EAAIM,UAAY,QAGhB,IAAMF,EAAQJ,EAAIO,YAAYJ,GAAMC,MAC9BI,EAAU5B,EAAawB,EAAS,GAEtCJ,EAAIS,KAAJ,UAAc,GAAKD,EAAnB,iBAEAR,EAAIU,SAASP,EAAMvB,GAAkBwB,EAAQI,EAAU,EAAG5B,IAG1D,IAFA,IAAM+B,EAAQX,EAAIY,aAAa,EAAG,EAAGb,EAAOK,MAAOL,EAAOM,QACpDQ,EAAW,IAAIC,YAAYH,EAAMI,KAAKC,QACnCC,EAAI,EAAGA,EAAIlB,EAAOK,MAAOa,GAAK,EACrC,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAOM,OAAQa,GAAK,EACtC,GAAIL,EAASK,EAAInB,EAAOK,MAAQa,GAAI,CAClC,IAAIE,EAAQxB,KAAKyB,MAAMzB,KAAKE,UAAYhB,EAAOY,OAAS,IACxDS,EAAOmB,KAAK,CACVJ,EAAGA,EAAIrC,EACPsC,EAAGA,EAAItC,EACPuC,MAAOtC,EAAOsC,GACdG,KAAM3B,KAAKE,WAMnB,OAAOK,EAQuBqB,CAAarC,EAAUsC,aAClD,IAEH,IAAMC,EAAU,IAChB,OACE,sBAAKC,UAAU,UAAf,UACE,wBAAQC,IAAKzC,EAAW0C,MAAO,CAAEC,QAAS,UAC1C,qBACEC,QAAO,cAASL,EAAT,YAAoBA,GAC3BM,MAAM,6BAFR,SAIG/C,GACCA,EAAUgD,KAAI,SAACC,EAAMzC,GACnB,OACE,mBACE0C,UAAS,oBAAeT,EAAUQ,EAAKhB,EAA9B,YAAmCQ,EAAUQ,EAAKf,EAAlD,KADX,SAIE,wBACEQ,UAAU,gBACVS,GAAI,EACJC,GAAI,EACJC,EAAG,EACHC,KAAML,EAAKd,MACXS,MAAO,CAAEW,eAAe,GAAD,OAAK,EAAIN,EAAKX,KAAd,SARpB9B,YC3DNgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,sCACQ,IACN,mBACEC,KAAK,qDACLC,OAAO,SACPC,IAAI,sBAHN,kBAMK,IARP,aAYFC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.29a30da9.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst NAME = \"Particles\";\nconst RESOLUTION = 160;\nconst colors = [\"#006984\", \"#0054a2\", \"#e6e8ea\", \"#000000\"];\n\nconst getShuffledArr = (arr) => {\n  const newArr = arr.slice();\n  for (let i = newArr.length - 1; i > 0; i--) {\n    const rand = Math.floor(Math.random() * (i + 1));\n    [newArr[i], newArr[rand]] = [newArr[rand], newArr[i]];\n  }\n  return newArr;\n};\n\nconst getParticles = (canvas) => {\n  const ctx = canvas.getContext(\"2d\");\n\n  const result = [];\n  const text = NAME;\n  canvas.width = RESOLUTION;\n  canvas.height = RESOLUTION;\n  ctx.fillStyle = \"black\";\n\n  // The default font is 10px sans-serif.\n  const width = ctx.measureText(text).width;\n  const scaler = (RESOLUTION / width) * 0.9; // 90% of width\n\n  ctx.font = `${10 * scaler}px sans-serif`;\n\n  ctx.fillText(text, RESOLUTION / 2 - (width * scaler) / 2, RESOLUTION / 2);\n  const idata = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  const buffer32 = new Uint32Array(idata.data.buffer);\n  for (let x = 0; x < canvas.width; x += 1) {\n    for (let y = 0; y < canvas.height; y += 1) {\n      if (buffer32[y * canvas.width + x]) {\n        let color = Math.round(Math.random() * (colors.length - 1));\n        result.push({\n          x: x / RESOLUTION,\n          y: y / RESOLUTION,\n          color: colors[color],\n          time: Math.random(),\n        });\n      }\n    }\n  }\n\n  return result;\n};\n\nfunction Bubble() {\n  const [particles, setParticles] = useState();\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    setParticles(getShuffledArr(getParticles(canvasRef.current)));\n  }, []);\n\n  const svgSize = 1000;\n  return (\n    <div className=\"bubbles\">\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\n      <svg\n        viewBox={`0 0 ${svgSize} ${svgSize}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {particles &&\n          particles.map((item, i) => {\n            return (\n              <g\n                transform={`translate(${svgSize * item.x} ${svgSize * item.y})`}\n                key={i}\n              >\n                <circle\n                  className=\"bubble_circle\"\n                  cx={0}\n                  cy={0}\n                  r={8}\n                  fill={item.color}\n                  style={{ animationDelay: `${4 * item.time}s` }}\n                />\n              </g>\n            );\n          })}\n      </svg>\n    </div>\n  );\n}\n\nexport default Bubble;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Bubble from \"./bubble\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Bubble />\n    <p>\n      check{\" \"}\n      <a\n        href=\"https://github.com/signalwerk/visual.particle.typo\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        code\n      </a>{\" \"}\n      here\n    </p>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}